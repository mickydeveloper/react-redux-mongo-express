@function relative-size( $target, $context: $base-fs, $unit: em ) {   
    @return #{$target/$context}$unit;   
}

@function rs( $target, $context: $base-fs, $unit: em ) {

    @return relative-size( $target, $context, $unit );

}

$rem-base: 16px !default;

$modules: () !default;
@mixin exports($name) {
    @if (index($modules, $name) == false) {
    $modules: append($modules, $name);
    @content;
    }
}
@function convert-to-rem($value, $base-value: $rem-base)  {
    $value: strip-unit($value) / strip-unit($base-value) * 1rem;
    $ievalue:  strip-unit($value) * strip-unit($base-value) * 1px;
    
    @if ($value == 0rem) { $value: 0; };
    @return $value;
}

@function rem-calc($values, $base-value: $rem-base) {
    $max: length($values);

    @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

    $remValues: ();
    @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
    }
    @return $remValues;
}

@function emCalc($values){
    @return rem-calc($values);
}
// Deprecated: We'll drop support for this in 5.1.0, use rem-calc()
@function em-calc($values){
    @return rem-calc($values);
}


